name: 'Helm Deployment'
description: 'Deploy using Helm'

inputs:
  env:
    description: 'Deployment environment (e.g., dev, prod)'
    required: true
  namespace:
    description: 'Kubernetes namespace for the deployment'
    required: true
  release_name:
    description: 'Name of the Helm release'
    required: true
  install_dependencies:
    description: 'Whether to install Helm chart dependencies or not (true/false)'
    default: 'false'
  image_name:
    description: 'Name of the Docker image to be deployed'
    required: false
  image_tag:
    description: 'Tag of the Docker image to be deployed'
    required: false
  params:
    description: 'Additional flags for the Helm install command'
    required: false
  working-directory:
    description: 'Working directory for Helm commands'
    default: 'automation/helm'
  app_version:
    description: 'App version that should be assigned to the datadog version tag'
    required: true

runs:
  using: "composite"
  steps:
    - run: helm dep build ${{ inputs.release_name }}
      shell: bash
      id: build-helm-deps
      working-directory: ${{ inputs.working-directory }}
      if: ${{ inputs.install_dependencies }}

    - run: |
        var_namespace=${{ inputs.namespace }}
        var_namespace=$(echo $var_namespace | awk '{print substr($0,0,30)}')
        echo "var_namespace=${var_namespace}" | tee -a $GITHUB_ENV
      shell: bash
      id: set_namespace
      working-directory: ${{ inputs.working-directory }}

    - run: |
        release=${{ inputs.release_name }}

        pending_chart=$(helm list -n $var_namespace -a -o json | jq ".[] | select(.name == \"$release\" and (.status == \"pending-install\" or .status == \"pending-upgrade\" or .status == \"pending-rollback\"))" )
        pending_chart_name=$(echo $pending_chart | jq '.name' -r)
        revision_status=$(echo $pending_chart | jq '.status' -r)
        revision=$(echo $pending_chart | jq '.revision' -r)

        [[ $pending_chart_name == "" ]] && echo "The chart is not in pending state. Exiting" && exit 0

        while [ "$revision_status" == "pending-install" ] || [ "$revision_status" == "pending-upgrade" ] || [ "$revision_status" == "pending-rollback" ]
        do
            revision=$(($revision-1))
            revision_status=$(helm history $release -n $var_namespace -o json | jq ".[] | select(.revision == $revision) | .status" -r)
        done

        echo "Rolling back to revision: " $revision

        if  [ $revision -eq 0 ]; then
            helm uninstall $release -n $var_namespace
        else
            helm rollback $release $revision -n $var_namespace
        fi

        pending_jobs=$(kubectl get job -o=name -n $var_namespace)
        if [[ $pending_jobs != "" ]]; then
          echo "Deleting pending jobs: ${pending_jobs}"
          kubectl -n $var_namespace delete $pending_jobs
        fi
      shell: bash
      id: helm-unlock-pending-charts
      working-directory: ${{ inputs.working-directory }}

    - run: |
        helm upgrade ${{ inputs.release_name }} ./${{ inputs.release_name }} \
        -f values-${{ inputs.env }}.yaml \
        -n ${var_namespace,,} \
        --install \
        --atomic \
        --create-namespace \
        --debug \
        --set "${{ inputs.release_name }}.image_tag=${GITHUB_RUN_ID}.${GITHUB_RUN_NUMBER}" \
        --set "global.branches.monorepo=${{ inputs.nursa_monorepo_branch }}" \
        --set "global.branches.nursa-api=${{ inputs.nursa_api_branch }}" \
        --set "global.branches.nursa-web=${{ inputs.nursa_web_branch }}" \
        --set "global.appVersion=${{ inputs.app_version }}" \
        --timeout 20m0s \
        ${{ inputs.params }}
      shell: bash
      id: helm-install
      working-directory: ${{ inputs.working-directory }}
