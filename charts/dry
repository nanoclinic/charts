Release "nanoservice" does not exist. Installing it now.
NAME: nanoservice
LAST DEPLOYED: Mon Mar 11 16:31:58 2024
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
MANIFEST:
---
# Source: nanoservice/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pdb-nanoservice
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: nanoservice
---
# Source: nanoservice/templates/service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    iam.gke.io/gcp-service-account: "@.iam.gserviceaccount.com"  
  labels:
    chart: "nanoservice-1.1.5"
    release: nanoservice
    env: 
    version: 0.0.1
  name: nanoservice
  namespace: default
---
# Source: nanoservice/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: nanoservice  
  labels:
    chart: "nanoservice-1.1.5"
    release: nanoservice
    env: 
    version: 0.0.1
    app: nanoservice
spec:
  selector:
    app: nanoservice
  ports:
  - name: nanoservice-port
    protocol: TCP
    port: 5000
    targetPort: 5000
---
# Source: nanoservice/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nanoservice
  namespace: default  
  labels:
    chart: "nanoservice-1.1.5"
    release: nanoservice
    env: 
    version: 0.0.1  
  annotations:
    timestamp: "1710185518"
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: nanoservice
  replicas: 2
  template:
    metadata:      
      labels:
        chart: "nanoservice-1.1.5"
        release: nanoservice
        env: 
        version: 0.0.1
        app: nanoservice      
      annotations:
        timestamp: "1710185518"
    spec:
      serviceAccountName: 
      nodeSelector:
        iam.gke.io/gke-metadata-server-enabled: "true"
      containers:
        - name: nanoservice
          image: image:tag
          imagePullPolicy: Always
          ports:
          - containerPort: 5000
          startupProbe:
            periodSeconds: "10"
            timeoutSeconds: "5"
            failureThreshold: "5"            
            exec:
              command:
                - node
                - scripts/health.js
          livenessProbe:
            periodSeconds: "10"
            timeoutSeconds: "5"
            failureThreshold: "5"            
            exec:
              command:
                - node
                - scripts/health.js
          readinessProbe:
            periodSeconds: "10"
            timeoutSeconds: "5"
            failureThreshold: "5"            
            exec:
              command:
                - node
                - scripts/health.js
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 200m
          env:
---
# Source: nanoservice/templates/route.yaml
kind: HTTPRoute
apiVersion: gateway.networking.k8s.io/v1beta1
metadata:
  name: nanoservice-route
  namespace: default
spec:
  parentRefs:
    - kind: Gateway
      name: api-gateway-foundation
  hostnames:
    - 
  rules:
    - matches:
      - path:
          type: PathPrefix
          value: /%!s(<nil>)
      filters:
      - type: URLRewrite
        urlRewrite:
          path:
            type: ReplacePrefixMatch
            replacePrefixMatch: /
      backendRefs:
      - name: nanoservice
        port: 5000
---
# Source: nanoservice/templates/mpa.yaml
apiVersion: autoscaling.gke.io/v1beta1
kind: MultidimPodAutoscaler
metadata:
  name: mpa-nanoservice
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nanoservice
  goals:
    metrics:
    - type: Resource
      resource:
      # Define the target CPU utilization request here
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
  constraints:
    global:
      minReplicas: 2
      maxReplicas: 2
    containerControlledResources: [ memory ]
    container:
    - name: '*'
    # Define boundaries for the memory request here
      requests:
        minAllowed:
          memory: 100Mi
        maxAllowed:
          memory: 200Mi
  policy:
    updateMode: Auto

NOTES:
☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸

    ☸☸    ☸☸    ☸☸☸☸☸☸☸☸    ☸☸         ☸☸☸     ☸☸☸
    ☸☸    ☸☸    ☸☸          ☸☸         ☸☸ ☸☸ ☸☸ ☸☸
    ☸☸☸☸☸☸☸☸    ☸☸☸☸☸☸      ☸☸         ☸☸  ☸☸☸  ☸☸
    ☸☸    ☸☸    ☸☸          ☸☸         ☸☸       ☸☸
    ☸☸    ☸☸    ☸☸☸☸☸☸☸☸    ☸☸☸☸☸☸☸    ☸☸       ☸☸

☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸☸


😀 Obrigado 😀 Você instalou o chart: nanoservice.

Este deployment pode ser atômico se utilizar a flag --atomic ⚛
Significa que irá fazer rollback caso não seja bem-sucedido.

❗❗❗❗❗ INFO ❗❗❗❗❗
Este chart possui os seguintes componentes:

Migration:
    🔅 Um init container no caso de migration.enabled

Release:
    🔅 Service Account: nanoservice
    🔅 Deployment
    🔅 PDB (Pod Disruption Budget = 1)
    🔅 Service
    🔅 Multidimensional Pod Autoscaler (MPA)
    🔅 HTTP Route no API Gateway no caso de expose = true
    🔅 Health Check se definido


🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍🔍
EXPLORE!

Seus logs deste app estão aqui:

https://console.cloud.google.com/logs/query;query=resource.type%3D%22k8s_container%22%20OR%20resource.type%3D%22k8s_pod%22%0Aresource.labels.cluster_name%3D%22nano-%22%0Aresource.labels.namespace_name%3D%22default%22;summaryFields=:false:32:beginning;?project=
